import { Injectable, Inject } from '@angular/core';
import { DOCUMENT } from '@angular/common';

/**
 * Service to manage application configuration and determine the environment (MFE or standalone).
 */
@Injectable({
  providedIn: 'root'
})
export class AppConfigService {
  private isMfeMode: boolean;

  constructor(@Inject(DOCUMENT) private document: Document) {
    this.init();
  }

  /**
   * Initializes the service by determining if the app is in MFE mode based on the base href.
   */
  private init(): void {
    const baseHref = this.document.getElementsByTagName('base')[0]?.getAttribute('href');
    this.isMfeMode = baseHref !== '/launch-openaccount/';
  }

  /**
   * Returns whether the app is running in MFE mode.
   * @returns A boolean indicating if the app is in MFE mode.
   */
  public getIsMfeMode(): boolean {
    return this.isMfeMode;
  }
}
-------------------
import { TestBed } from '@angular/core/testing';
import { AppConfigService } from './app-config.service';
import { DOCUMENT } from '@angular/common';

describe('AppConfigService', () => {
  let service: AppConfigService;
  let mockDocument: Document;

  beforeEach(() => {
    mockDocument = {
      getElementsByTagName: jest.fn()
    } as any;

    TestBed.configureTestingModule({
      providers: [
        AppConfigService,
        { provide: DOCUMENT, useValue: mockDocument },
      ],
    });

    service = TestBed.inject(AppConfigService);
  });

  it('should determine MFE mode based on base href', () => {
    mockDocument.getElementsByTagName = jest.fn().mockReturnValue([
      { getAttribute: jest.fn().mockReturnValue('/launch-openaccount/') }
    ]);

    service = TestBed.inject(AppConfigService);
    expect(service.getIsMfeMode()).toBe(false);

    mockDocument.getElementsByTagName = jest.fn().mockReturnValue([
      { getAttribute: jest.fn().mockReturnValue('/other-path/') }
    ]);

    service = TestBed.inject(AppConfigService);
    expect(service.getIsMfeMode()).toBe(true);
  });
});

------------------
jest.mock('@angular-architects/module-federation', () => ({
  loadRemoteModule: jest.fn(() => Promise.resolve({}))
}));

 "node_modules/(?!(jest-)?@angular-architects/module-federation/)"

  "^@angular-architects/module-federation$": "<rootDir>/path-to-mock"

"transformIgnorePatterns": [
  "node_modules/(?!.*\\.mjs$|@angular|@angular-architects/module-federation)"
]
