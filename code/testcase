import { registerPlugin } from '@capacitor/core';
import { TMXWeb } from './tmxplugin'; // Importing TMXWeb class to instantiate and test

jest.mock('@capacitor/core', () => ({
  registerPlugin: jest.fn(), // Mock the registerPlugin function
  WebPlugin: class {
    constructor() {}
  },
}));

describe('TMXWeb Plugin', () => {
  let tmxWeb: TMXWeb;

  beforeEach(() => {
    tmxWeb = new TMXWeb();
  });

  it('should throw "Method not implemented" when profileDevice is called', async () => {
    await expect(tmxWeb.profileDevice({ tmxSessionId: '123' })).rejects.toThrow('Method not implemented.');
  });

  it('should register TMX plugin using registerPlugin', () => {
    // Set up the mock implementation before importing the TMX module
    (registerPlugin as jest.Mock).mockImplementation(() => ({
      web: jest.fn().mockReturnValue(new TMXWeb())
    }));

    // Now import TMX after the mock is set up
    const { TMX } = require('./tmxplugin'); // TMX is imported here after mock setup

    // Ensure registerPlugin was called with 'TMX' and { web: expect.any(Function) }
    expect(registerPlugin).toHaveBeenCalledWith('TMX', { web: expect.any(Function) });
  });

  it('should create a TMXWeb instance when calling the web function', () => {
    // Set up the mock before importing the TMX module
    (registerPlugin as jest.Mock).mockImplementation(() => ({
      web: jest.fn().mockReturnValue(new TMXWeb())
    }));

    // Import TMX after mocking
    const { TMX } = require('./tmxplugin');

    // Extract the plugin configuration and call the web function
    const pluginConfig = registerPlugin.mock.calls[0][1];
    const webInstance = pluginConfig.web();
    
    // Ensure the web function returns an instance of TMXWeb
    expect(webInstance).toBeInstanceOf(TMXWeb);
  });
});
