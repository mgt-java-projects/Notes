import { registerPlugin } from '@capacitor/core';
import { TMXWeb } from './tmxplugin'; // Ensure TMXWeb class is imported

// Mock the necessary Capacitor/core functions
jest.mock('@capacitor/core', () => ({
  registerPlugin: jest.fn(), // Mock registerPlugin
  WebPlugin: class {
    constructor() {}
  },
}));

describe('TMXWeb Plugin', () => {
  let tmxWeb: TMXWeb;

  beforeEach(() => {
    tmxWeb = new TMXWeb();
    // Reset mocks before each test
    jest.clearAllMocks();
  });

  it('should throw "Method not implemented" when profileDevice is called', async () => {
    await expect(tmxWeb.profileDevice({ tmxSessionId: '123' })).rejects.toThrow('Method not implemented.');
  });

  it('should register TMX plugin using registerPlugin', () => {
    // Set up the mock implementation before importing the TMX module
    (registerPlugin as jest.Mock).mockImplementation(() => ({
      web: jest.fn().mockReturnValue(new TMXWeb())
    }));

    // Import the TMX after the mock has been set up
    const { TMX } = require('./tmxplugin');

    // Ensure registerPlugin was called
    expect(registerPlugin).toHaveBeenCalledWith('TMX', { web: expect.any(Function) });

    // Check that the call actually occurred to prevent "undefined" errors
    if (registerPlugin.mock.calls.length > 0) {
      const pluginConfig = registerPlugin.mock.calls[0][1]; // Safely access the call
      expect(pluginConfig.web()).toBeInstanceOf(TMXWeb); // Check that web returns a TMXWeb instance
    } else {
      fail('registerPlugin was not called');
    }
  });
});
