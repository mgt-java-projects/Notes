import { render, screen, fireEvent } from '@testing-library/angular';
import { LetsGetStartedComponent } from './lets-get-started.component';
import { AppConfigService } from '@app/launchpack/core/services/app-config.service';
import { NavigationService } from '@app/launchpack/core/services/navigation/navigation.service';
import { Product } from '@demo/freddy/core/product-selection-card';

jest.mock('@app/launchpack/core/services/app-config.service');
jest.mock('@app/launchpack/core/services/navigation/navigation.service');

describe('LetsGetStartedComponent', () => {
  let mockAppConfigService: jest.Mocked<AppConfigService>;
  let mockNavigationService: jest.Mocked<NavigationService>;

  beforeEach(async () => {
    mockAppConfigService = new AppConfigService() as jest.Mocked<AppConfigService>;
    mockNavigationService = new NavigationService() as jest.Mocked<NavigationService>;

    mockAppConfigService.init.mockImplementation(() => {});
    mockNavigationService.init.mockImplementation(() => {});
    mockNavigationService.navigateNext.mockImplementation(() => {});
    
    await render(LetsGetStartedComponent, {
      providers: [
        { provide: AppConfigService, useValue: mockAppConfigService },
        { provide: NavigationService, useValue: mockNavigationService },
      ]
    });
  });

  it('should create the component', () => {
    const component = screen.getByTestId('lets-get-started');
    expect(component).toBeTruthy();
  });

  it('should initialize appConfigService and navigationService on init', () => {
    expect(mockAppConfigService.init).toHaveBeenCalled();
    expect(mockNavigationService.init).toHaveBeenCalledWith('CheckingAccount');
  });

  it('should toggle showBottomSheetVal when onInfoButtonClicked is called', async () => {
    const component = await screen.findByTestId('lets-get-started');
    const instance = component.componentInstance as LetsGetStartedComponent;

    expect(instance.showBottomSheetVal).toBe(false);
    
    fireEvent.click(component);
    instance.onInfoButtonClicked();
    
    expect(instance.showBottomSheetVal).toBe(true);
  });

  it('should call navigationService.navigateNext when next is called', () => {
    const component = screen.getByTestId('lets-get-started');
    const instance = component.componentInstance as LetsGetStartedComponent;

    instance.next();

    expect(mockNavigationService.navigateNext).toHaveBeenCalled();
  });
});
