import { registerPlugin } from '@capacitor/core';
import { TMXWeb } from './tmxplugin';

// Mocking '@capacitor/core' module
jest.mock('@capacitor/core', () => ({
  registerPlugin: jest.fn(),
  WebPlugin: class { constructor() {} },
}));

describe('TMXWeb Plugin', () => {
  let tmxWeb: TMXWeb;

  beforeEach(() => {
    tmxWeb = new TMXWeb();
    jest.clearAllMocks(); // Clear all mock calls and instances
  });

  it('should register TMX plugin using registerPlugin', () => {
    // Mocking registerPlugin to return platform implementations
    (registerPlugin as jest.Mock).mockReturnValue({
      web: jest.fn().mockReturnValue(new TMXWeb()),
    });

    const { TMX } = require('./tmxplugin'); // Import the TMX plugin after mocking

    // Validate that registerPlugin was called correctly
    expect(registerPlugin).toHaveBeenCalledWith('TMX', { web: expect.any(Function) });

    // Safely access mock calls to avoid undefined errors
    const pluginConfig = registerPlugin.mock.calls[0][1]; // Retrieve the second argument (config)

    // Check if the web platform function returns an instance of TMXWeb
    const webInstance = pluginConfig.web();
    expect(webInstance).toBeInstanceOf(TMXWeb);
  });
});
