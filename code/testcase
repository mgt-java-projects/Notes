import { TMXWeb } from './tmxplugin';
import { registerPlugin } from '@capacitor/core';

jest.mock('@capacitor/core', () => ({
  registerPlugin: jest.fn(),
  WebPlugin: class {
    constructor() {}
  },
}));

describe('TMXWeb Plugin', () => {
  let tmxWeb: TMXWeb;

  beforeEach(() => {
    tmxWeb = new TMXWeb();
  });

  it('should throw "Method not implemented" when profileDevice is called', async () => {
    await expect(tmxWeb.profileDevice({ tmxSessionId: '123' })).rejects.toThrow('Method not implemented.');
  });

  it('should register TMX plugin using registerPlugin', () => {
    // Use mockImplementation to mock the behavior of registerPlugin
    (registerPlugin as jest.Mock).mockImplementation(() => ({
      web: jest.fn().mockReturnValue(new TMXWeb())
    }));

    // Import TMX after mocking registerPlugin
    const { TMX } = require('./tmxplugin');

    // Verify registerPlugin is called with correct parameters
    expect(registerPlugin).toHaveBeenCalledWith('TMX', { web: expect.any(Function) });
  });

  it('should create a TMXWeb instance when calling the web function', () => {
    // Use mockImplementation for registerPlugin
    (registerPlugin as jest.Mock).mockImplementation(() => ({
      web: jest.fn().mockReturnValue(new TMXWeb())
    }));

    const { TMX } = require('./tmxplugin');

    // Ensure the web function returns a new TMXWeb instance
    const pluginConfig = registerPlugin.mock.calls[0][1];
    const webInstance = pluginConfig.web();
    
    expect(webInstance).toBeInstanceOf(TMXWeb);
  });
});
