import {
  trigger,
  transition,
  style,
  query,
  animate,
  group,
  AnimationMetadata
} from '@angular/animations';

function log(message: string): AnimationMetadata[] {
  console.log(`[ANIMATION] ${message}`);
  return [];
}

export const slideRouteAnimation = trigger('routeAnimation', [
  // Slide forward (next page) — RIGHT ➝ LEFT
  transition('forward => *', [
    ...log('Transition: FORWARD'),
    style({ position: 'relative' }),
    query(':enter, :leave', [
      style({
        position: 'absolute',
        width: '100%',
        height: '100%',
        top: 0,
        left: 0
      })
    ], { optional: true }),

    group([
      query(':leave', [
        animate('400ms ease-in-out', style({ transform: 'translateX(-100%)' }))
      ], { optional: true }),

      query(':enter', [
        style({ transform: 'translateX(100%)' }),
        animate('400ms ease-in-out', style({ transform: 'translateX(0%)' }))
      ], { optional: true })
    ])
  ]),

  // Slide back (previous page) — LEFT ➝ RIGHT
  transition('back => *', [
    ...log('Transition: BACKWARD'),
    style({ position: 'relative' }),
    query(':enter, :leave', [
      style({
        position: 'absolute',
        width: '100%',
        height: '100%',
        top: 0,
        left: 0
      })
    ], { optional: true }),

    group([
      query(':leave', [
        animate('400ms ease-in-out', style({ transform: 'translateX(100%)' }))
      ], { optional: true }),

      query(':enter', [
        style({ transform: 'translateX(-100%)' }),
        animate('400ms ease-in-out', style({ transform: 'translateX(0%)' }))
      ], { optional: true })
    ])
  ]),

  // Optional fallback: No direction specified — just fade in
  transition('* => *', [
    ...log('Transition: DEFAULT (fallback fade)'),
    query(':enter', [
      style({ opacity: 0 }),
      animate('300ms ease-in', style({ opacity: 1 }))
    ], { optional: true })
  ])
]);
